{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","components/App.js","reportWebVitals.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumbers","theme","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAUe,SAASA,EAAOC,GAC3B,IACIC,EAIAD,EAJAC,SACAC,EAGAF,EAHAE,YACAC,EAEAH,EAFAG,MACAC,EACAJ,EADAI,SAIJ,EAAuBC,oBAAS,GAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KAOA,OACI,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACI,sBAAKE,UAAU,eAAf,UACKN,EACD,wBACIO,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAIH,GAAQ,SAAAI,GAAQ,OAAKA,MAHtC,SAII,cAAC,IAAD,CAAiBC,KAAMN,EAAKO,IAAcC,WAGlD,cAAC,aAAD,CACIC,eAhBZ,SAAsBC,EAAOC,EAAKd,GAC9BC,EAASD,IAgBDA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACLC,cAAa,EACbC,MAAK,EACLC,KAAKpB,EACLqB,aAAY,EACZC,MAAM,iBC1CX,SAASC,EAAgBC,EAAIC,GAExC,IAAMC,EAJK,iBAIkBF,EAC7B,EAAyBpB,oBAAS,WAC9B,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAc,MAAXC,EACQG,KAAKC,MAAMJ,GACK,oBAAjBF,EACCA,IAEAA,KAPf,mBAAOvB,EAAP,KAAa8B,EAAb,KAgBA,OAJAC,qBAAU,WACNL,aAAaM,QAAQR,EAAYI,KAAKK,UAAUjC,MAClD,CAACwB,EAAYxB,IAER,CAACA,EAAM8B,GCkBHI,MAtCf,WACE,MAAuBb,EAAgB,OAAO,IAA9C,mBAAOc,EAAP,KAAYC,EAAZ,KACA,EAAqBf,EAAgB,MAAM,IAA3C,mBAAOgB,EAAP,KAAWC,EAAX,KACA,EAAmBjB,EAAgB,KAAK,IAAxC,mBAAOkB,EAAP,KAAUC,EAAV,KACA,EAA2BtC,mBAAS,IAApC,mBAAOuC,EAAP,KAAcC,EAAd,KAiBA,OAhBAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAU,+BAAD,OAEDP,EAFC,iCAGAE,EAHA,mCAICE,EAJD,sCAOT,KAEF,OAAO,kBAAMM,aAAaF,MAE1B,CAACR,EAAKE,EAAIE,IAIV,qCACE,sBAAKlC,UAAU,gBAAf,UACE,cAACT,EAAD,CAAQE,SAAS,MAAMC,YAAY,OAAOC,MAAOmC,EAAMlC,SAAUmC,IACjE,cAACxC,EAAD,CAAQE,SAAS,MAAMC,YAAY,MAAMC,MAAOqC,EAAKpC,SAAUqC,IAC/D,cAAC1C,EAAD,CAAQE,SAAS,KAAKC,YAAY,KAAKC,MAAOuC,EAAItC,SAAUuC,OAG9D,qBAAKnC,UAAU,OAAf,SACE,wBAAQoC,OAAQA,EAAQK,MAAM,SAASC,QAAQ,gBAAgBC,YAAY,IAAIC,MAAM,OAAOC,OAAO,eCrB5FC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a5b2a599.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/mode/xml/xml';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css';\nimport { Controlled as ControlledEditor } from 'react-codemirror2';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCompressAlt,faExpandAlt } from '@fortawesome/free-solid-svg-icons';\n\nexport default function Editor(props) {\n    const {\n        language,\n        displayName,\n        value,\n        onChange\n    } = props;\n\n\n    const [open,setOpen] = useState(true);\n\n\n    function handleChange(editor,data,value){\n        onChange(value);\n    }\n\n    return (\n        <div className={`editor-container ${open ? '' : 'collapsed'}`}> \n            <div className=\"editor-title\">\n                {displayName}\n                <button \n                    type=\"button\"\n                    className=\"expand-collapse-btn\"\n                    onClick={()=>setOpen(prevOpen => !prevOpen)}>\n                    <FontAwesomeIcon icon={open?faCompressAlt:faExpandAlt}/>\n                </button>\n            </div> \n            <ControlledEditor\n                onBeforeChange={handleChange}\n                value={value}\n                className=\"code-mirror-wrapper\"\n                options={{\n                    lineWrapping:true,\n                    lint:true,\n                    mode:language,\n                    lineNumbers:true,\n                    theme:'material'\n                }}\n            />\n        </div>\n    )\n}\n","import React,{useEffect,useState} from 'react'\n\nconst PREFIX = 'codepen-clone-'\n\nexport default function useLocalStorage(key,initialValue) {\n\n    const prefixedKey = PREFIX + key;\n    const [value,setValue] = useState(()=>{\n        const jsonValue = localStorage.getItem(prefixedKey);\n        if(jsonValue!=null)\n            return JSON.parse(jsonValue);\n        if(typeof initialValue === 'function'){\n            return initialValue();\n        }else {\n            return initialValue;\n        }\n    })\n\n\n    useEffect(()=>{\n        localStorage.setItem(prefixedKey,JSON.stringify(value))\n    },[prefixedKey,value])\n\n    return [value,setValue]\n}\n","import React, {useState,useEffect} from \"react\";\nimport Editor  from \"./Editor\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nfunction App() {\n  const [html,setHtml] = useLocalStorage('html','')\n  const [css,setCss] = useLocalStorage('css','')\n  const [js,setJs] = useLocalStorage('js','')\n  const [srcDoc,setSrcDoc] = useState('');\n  useEffect(()=>{\n    const timeout = setTimeout(()=>{\n      setSrcDoc( `\n      <html>\n      <body>${html}</body>\n      <style>${css}</style>\n      <script>${js}</script>\n      </html>\n    `)\n    },250)\n\n    return () => clearTimeout(timeout)\n\n  },[html,css,js])\n\n\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor language=\"xml\" displayName=\"HTML\" value={html} onChange={setHtml} />\n        <Editor language=\"css\" displayName=\"CSS\" value={css} onChange={setCss} />\n        <Editor language=\"js\" displayName=\"JS\" value={js} onChange={setJs} />\n      </div>\n\n      <div className=\"pane\">\n        <iframe srcDoc={srcDoc} title=\"output\" sandbox=\"allow-scripts\" frameBorder=\"0\" width=\"100%\" height=\"100%\">\n\n        </iframe>\n      </div>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}